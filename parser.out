Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VAR dec_list START stmt_list END
Rule 2     prog -> VAR dec_list def_list START stmt_list END
Rule 3     def_list -> def
Rule 4     def_list -> def_list SEMI_COLON def
Rule 5     def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END
Rule 6     def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END
Rule 7     defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA
Rule 8     args -> arg
Rule 9     args -> args SEMI_COLON arg
Rule 10    arg -> ID
Rule 11    arg -> INTEGER
Rule 12    arg -> FLOAT_NUM
Rule 13    arg -> OPEN_SKOBKA exp CLOSE_SKOBKA
Rule 14    dec_list -> dec
Rule 15    dec_list -> dec_list SEMI_COLON dec
Rule 16    dec -> id_list DOUBLE_POINT type
Rule 17    type -> INT
Rule 18    type -> BOOLEAN
Rule 19    type -> FLOAT
Rule 20    type -> STR
Rule 21    id_list -> ID
Rule 22    id_list -> id_list COMA ID
Rule 23    stmt_list -> stmt
Rule 24    stmt_list -> stmt_list SEMI_COLON stmt
Rule 25    stmt -> assign
Rule 26    stmt -> print
Rule 27    stmt -> while
Rule 28    stmt -> if
Rule 29    stmt_list_if -> stmt_if
Rule 30    stmt_list_if -> stmt_list_if SEMI_COLON stmt_if
Rule 31    stmt_if -> assign
Rule 32    stmt_if -> print
Rule 33    stmt_if -> while
Rule 34    stmt_if -> if
Rule 35    stmt_if -> CONTINUE
Rule 36    stmt_if -> BREAK
Rule 37    stmt_list_def -> stmt_def
Rule 38    stmt_list_def -> stmt_list_def SEMI_COLON stmt_def
Rule 39    stmt_def -> assign
Rule 40    stmt_def -> print
Rule 41    stmt_def -> while
Rule 42    stmt_def -> if
Rule 43    stmt_def -> return
Rule 44    return -> RETURN exp
Rule 45    assign -> ID ASSiGNSYMBOL exp
Rule 46    assign -> ID ASSiGNSYMBOL STRING
Rule 47    exp -> term
Rule 48    exp -> exp PLUS term
Rule 49    exp -> exp MINUS term
Rule 50    term -> factor
Rule 51    term -> term MULTIPLICATION factor
Rule 52    term -> term DIV factor
Rule 53    factor -> defstmt
Rule 54    factor -> ID
Rule 55    factor -> INTEGER
Rule 56    factor -> FLOAT_NUM
Rule 57    factor -> OPEN_SKOBKA exp CLOSE_SKOBKA
Rule 58    print -> PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
Rule 59    print -> PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
Rule 60    while -> WHILE bool_exp DO START stmt_list END
Rule 61    if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
Rule 62    if -> IF bool_exp THEN START stmt_list_if END
Rule 63    bool_exp -> bool_exp OR bool_exp_term
Rule 64    bool_exp -> bool_exp_term
Rule 65    bool_exp -> NOT bool_exp
Rule 66    bool_exp -> bool
Rule 67    bool_exp_term -> bool_exp_term AND bool
Rule 68    bool_exp_term -> bool
Rule 69    bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
Rule 70    bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
Rule 71    bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

Terminals, with rules where they appear

AND                  : 67
ASSiGNSYMBOL         : 45 46
BOOLEAN              : 18
BREAK                : 36
CLOSE_SKOBKA         : 5 6 7 13 57 58 59 69 70 71
COMA                 : 22
CONTINUE             : 35
DEF                  : 5 6
DIV                  : 52
DO                   : 60
DOUBLE_POINT         : 16
ELSE                 : 61
END                  : 1 2 5 6 60 61 61 62
EQUALITY             : 69
FLOAT                : 19
FLOAT_NUM            : 12 56
ID                   : 5 6 7 10 21 22 45 46 54
IF                   : 61 62
INT                  : 17
INTEGER              : 11 55
LESS                 : 71
MINUS                : 49
MORE                 : 70
MULTIPLICATION       : 51
NOT                  : 65
OPEN_SKOBKA          : 5 6 7 13 57 58 59 69 70 71
OR                   : 63
PLUS                 : 48
PRINT                : 58 59
RETURN               : 44
SEMI_COLON           : 4 9 15 24 30 38
START                : 1 2 5 6 60 61 61 62
STR                  : 20
STRING               : 46 59
THEN                 : 61 62
VAR                  : 1 2 6
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

arg                  : 8 9
args                 : 7 9
assign               : 25 31 39
bool                 : 66 67 68
bool_exp             : 60 61 62 63 65
bool_exp_term        : 63 64 67
dec                  : 14 15
dec_list             : 1 2 5 6 6 15
def                  : 3 4
def_list             : 2 4
defstmt              : 53
exp                  : 13 44 45 48 49 57 58 69 69 70 70 71 71
factor               : 50 51 52
id_list              : 16 22
if                   : 28 34 42
print                : 26 32 40
prog                 : 0
return               : 43
stmt                 : 23 24
stmt_def             : 37 38
stmt_if              : 29 30
stmt_list            : 1 2 24 60
stmt_list_def        : 5 6 38
stmt_list_if         : 30 61 61 62
term                 : 47 48 49 51 52
type                 : 16
while                : 27 33 41

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VAR dec_list START stmt_list END
    (2) prog -> . VAR dec_list def_list START stmt_list END

    VAR             shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> VAR . dec_list START stmt_list END
    (2) prog -> VAR . dec_list def_list START stmt_list END
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (21) id_list -> . ID
    (22) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 3
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 3

    (1) prog -> VAR dec_list . START stmt_list END
    (2) prog -> VAR dec_list . def_list START stmt_list END
    (15) dec_list -> dec_list . SEMI_COLON dec
    (3) def_list -> . def
    (4) def_list -> . def_list SEMI_COLON def
    (5) def -> . DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END
    (6) def -> . DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END

    START           shift and go to state 7
    SEMI_COLON      shift and go to state 9
    DEF             shift and go to state 11

    def_list                       shift and go to state 8
    def                            shift and go to state 10

state 4

    (14) dec_list -> dec .

    START           reduce using rule 14 (dec_list -> dec .)
    SEMI_COLON      reduce using rule 14 (dec_list -> dec .)
    DEF             reduce using rule 14 (dec_list -> dec .)
    CLOSE_SKOBKA    reduce using rule 14 (dec_list -> dec .)
    ID              reduce using rule 14 (dec_list -> dec .)
    PRINT           reduce using rule 14 (dec_list -> dec .)
    WHILE           reduce using rule 14 (dec_list -> dec .)
    IF              reduce using rule 14 (dec_list -> dec .)
    RETURN          reduce using rule 14 (dec_list -> dec .)


state 5

    (16) dec -> id_list . DOUBLE_POINT type
    (22) id_list -> id_list . COMA ID

    DOUBLE_POINT    shift and go to state 12
    COMA            shift and go to state 13


state 6

    (21) id_list -> ID .

    DOUBLE_POINT    reduce using rule 21 (id_list -> ID .)
    COMA            reduce using rule 21 (id_list -> ID .)


state 7

    (1) prog -> VAR dec_list START . stmt_list END
    (23) stmt_list -> . stmt
    (24) stmt_list -> . stmt_list SEMI_COLON stmt
    (25) stmt -> . assign
    (26) stmt -> . print
    (27) stmt -> . while
    (28) stmt -> . if
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 14
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 8

    (2) prog -> VAR dec_list def_list . START stmt_list END
    (4) def_list -> def_list . SEMI_COLON def

    START           shift and go to state 24
    SEMI_COLON      shift and go to state 25


state 9

    (15) dec_list -> dec_list SEMI_COLON . dec
    (16) dec -> . id_list DOUBLE_POINT type
    (21) id_list -> . ID
    (22) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec                            shift and go to state 26
    id_list                        shift and go to state 5

state 10

    (3) def_list -> def .

    START           reduce using rule 3 (def_list -> def .)
    SEMI_COLON      reduce using rule 3 (def_list -> def .)


state 11

    (5) def -> DEF . ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END
    (6) def -> DEF . ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END

    ID              shift and go to state 27


state 12

    (16) dec -> id_list DOUBLE_POINT . type
    (17) type -> . INT
    (18) type -> . BOOLEAN
    (19) type -> . FLOAT
    (20) type -> . STR

    INT             shift and go to state 29
    BOOLEAN         shift and go to state 30
    FLOAT           shift and go to state 31
    STR             shift and go to state 32

    type                           shift and go to state 28

state 13

    (22) id_list -> id_list COMA . ID

    ID              shift and go to state 33


state 14

    (1) prog -> VAR dec_list START stmt_list . END
    (24) stmt_list -> stmt_list . SEMI_COLON stmt

    END             shift and go to state 34
    SEMI_COLON      shift and go to state 35


state 15

    (23) stmt_list -> stmt .

    END             reduce using rule 23 (stmt_list -> stmt .)
    SEMI_COLON      reduce using rule 23 (stmt_list -> stmt .)


state 16

    (25) stmt -> assign .

    END             reduce using rule 25 (stmt -> assign .)
    SEMI_COLON      reduce using rule 25 (stmt -> assign .)


state 17

    (26) stmt -> print .

    END             reduce using rule 26 (stmt -> print .)
    SEMI_COLON      reduce using rule 26 (stmt -> print .)


state 18

    (27) stmt -> while .

    END             reduce using rule 27 (stmt -> while .)
    SEMI_COLON      reduce using rule 27 (stmt -> while .)


state 19

    (28) stmt -> if .

    END             reduce using rule 28 (stmt -> if .)
    SEMI_COLON      reduce using rule 28 (stmt -> if .)


state 20

    (45) assign -> ID . ASSiGNSYMBOL exp
    (46) assign -> ID . ASSiGNSYMBOL STRING

    ASSiGNSYMBOL    shift and go to state 36


state 21

    (58) print -> PRINT . OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> PRINT . OPEN_SKOBKA STRING CLOSE_SKOBKA

    OPEN_SKOBKA     shift and go to state 37


state 22

    (60) while -> WHILE . bool_exp DO START stmt_list END
    (63) bool_exp -> . bool_exp OR bool_exp_term
    (64) bool_exp -> . bool_exp_term
    (65) bool_exp -> . NOT bool_exp
    (66) bool_exp -> . bool
    (67) bool_exp_term -> . bool_exp_term AND bool
    (68) bool_exp_term -> . bool
    (69) bool -> . OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> . OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
    (71) bool -> . OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

    NOT             shift and go to state 40
    OPEN_SKOBKA     shift and go to state 42

    bool_exp                       shift and go to state 38
    bool_exp_term                  shift and go to state 39
    bool                           shift and go to state 41

state 23

    (61) if -> IF . bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> IF . bool_exp THEN START stmt_list_if END
    (63) bool_exp -> . bool_exp OR bool_exp_term
    (64) bool_exp -> . bool_exp_term
    (65) bool_exp -> . NOT bool_exp
    (66) bool_exp -> . bool
    (67) bool_exp_term -> . bool_exp_term AND bool
    (68) bool_exp_term -> . bool
    (69) bool -> . OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> . OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
    (71) bool -> . OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

    NOT             shift and go to state 40
    OPEN_SKOBKA     shift and go to state 42

    bool_exp                       shift and go to state 43
    bool_exp_term                  shift and go to state 39
    bool                           shift and go to state 41

state 24

    (2) prog -> VAR dec_list def_list START . stmt_list END
    (23) stmt_list -> . stmt
    (24) stmt_list -> . stmt_list SEMI_COLON stmt
    (25) stmt -> . assign
    (26) stmt -> . print
    (27) stmt -> . while
    (28) stmt -> . if
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 44
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 25

    (4) def_list -> def_list SEMI_COLON . def
    (5) def -> . DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END
    (6) def -> . DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END

    DEF             shift and go to state 11

    def                            shift and go to state 45

state 26

    (15) dec_list -> dec_list SEMI_COLON dec .

    START           reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    SEMI_COLON      reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    DEF             reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    CLOSE_SKOBKA    reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    ID              reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    PRINT           reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    WHILE           reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    IF              reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    RETURN          reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)


state 27

    (5) def -> DEF ID . OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END
    (6) def -> DEF ID . OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END

    OPEN_SKOBKA     shift and go to state 46


state 28

    (16) dec -> id_list DOUBLE_POINT type .

    START           reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    SEMI_COLON      reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    DEF             reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    CLOSE_SKOBKA    reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    ID              reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    PRINT           reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    WHILE           reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    IF              reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    RETURN          reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)


state 29

    (17) type -> INT .

    START           reduce using rule 17 (type -> INT .)
    SEMI_COLON      reduce using rule 17 (type -> INT .)
    DEF             reduce using rule 17 (type -> INT .)
    CLOSE_SKOBKA    reduce using rule 17 (type -> INT .)
    ID              reduce using rule 17 (type -> INT .)
    PRINT           reduce using rule 17 (type -> INT .)
    WHILE           reduce using rule 17 (type -> INT .)
    IF              reduce using rule 17 (type -> INT .)
    RETURN          reduce using rule 17 (type -> INT .)


state 30

    (18) type -> BOOLEAN .

    START           reduce using rule 18 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 18 (type -> BOOLEAN .)
    DEF             reduce using rule 18 (type -> BOOLEAN .)
    CLOSE_SKOBKA    reduce using rule 18 (type -> BOOLEAN .)
    ID              reduce using rule 18 (type -> BOOLEAN .)
    PRINT           reduce using rule 18 (type -> BOOLEAN .)
    WHILE           reduce using rule 18 (type -> BOOLEAN .)
    IF              reduce using rule 18 (type -> BOOLEAN .)
    RETURN          reduce using rule 18 (type -> BOOLEAN .)


state 31

    (19) type -> FLOAT .

    START           reduce using rule 19 (type -> FLOAT .)
    SEMI_COLON      reduce using rule 19 (type -> FLOAT .)
    DEF             reduce using rule 19 (type -> FLOAT .)
    CLOSE_SKOBKA    reduce using rule 19 (type -> FLOAT .)
    ID              reduce using rule 19 (type -> FLOAT .)
    PRINT           reduce using rule 19 (type -> FLOAT .)
    WHILE           reduce using rule 19 (type -> FLOAT .)
    IF              reduce using rule 19 (type -> FLOAT .)
    RETURN          reduce using rule 19 (type -> FLOAT .)


state 32

    (20) type -> STR .

    START           reduce using rule 20 (type -> STR .)
    SEMI_COLON      reduce using rule 20 (type -> STR .)
    DEF             reduce using rule 20 (type -> STR .)
    CLOSE_SKOBKA    reduce using rule 20 (type -> STR .)
    ID              reduce using rule 20 (type -> STR .)
    PRINT           reduce using rule 20 (type -> STR .)
    WHILE           reduce using rule 20 (type -> STR .)
    IF              reduce using rule 20 (type -> STR .)
    RETURN          reduce using rule 20 (type -> STR .)


state 33

    (22) id_list -> id_list COMA ID .

    DOUBLE_POINT    reduce using rule 22 (id_list -> id_list COMA ID .)
    COMA            reduce using rule 22 (id_list -> id_list COMA ID .)


state 34

    (1) prog -> VAR dec_list START stmt_list END .

    $end            reduce using rule 1 (prog -> VAR dec_list START stmt_list END .)


state 35

    (24) stmt_list -> stmt_list SEMI_COLON . stmt
    (25) stmt -> . assign
    (26) stmt -> . print
    (27) stmt -> . while
    (28) stmt -> . if
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt                           shift and go to state 47
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 36

    (45) assign -> ID ASSiGNSYMBOL . exp
    (46) assign -> ID ASSiGNSYMBOL . STRING
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    STRING          shift and go to state 50
    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 49
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 37

    (58) print -> PRINT OPEN_SKOBKA . exp CLOSE_SKOBKA
    (59) print -> PRINT OPEN_SKOBKA . STRING CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    STRING          shift and go to state 58
    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 57
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 38

    (60) while -> WHILE bool_exp . DO START stmt_list END
    (63) bool_exp -> bool_exp . OR bool_exp_term

    DO              shift and go to state 59
    OR              shift and go to state 60


state 39

    (64) bool_exp -> bool_exp_term .
    (67) bool_exp_term -> bool_exp_term . AND bool

    DO              reduce using rule 64 (bool_exp -> bool_exp_term .)
    OR              reduce using rule 64 (bool_exp -> bool_exp_term .)
    THEN            reduce using rule 64 (bool_exp -> bool_exp_term .)
    AND             shift and go to state 61


state 40

    (65) bool_exp -> NOT . bool_exp
    (63) bool_exp -> . bool_exp OR bool_exp_term
    (64) bool_exp -> . bool_exp_term
    (65) bool_exp -> . NOT bool_exp
    (66) bool_exp -> . bool
    (67) bool_exp_term -> . bool_exp_term AND bool
    (68) bool_exp_term -> . bool
    (69) bool -> . OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> . OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
    (71) bool -> . OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

    NOT             shift and go to state 40
    OPEN_SKOBKA     shift and go to state 42

    bool_exp                       shift and go to state 62
    bool_exp_term                  shift and go to state 39
    bool                           shift and go to state 41

state 41

    (66) bool_exp -> bool .
    (68) bool_exp_term -> bool .

  ! reduce/reduce conflict for DO resolved using rule 66 (bool_exp -> bool .)
  ! reduce/reduce conflict for OR resolved using rule 66 (bool_exp -> bool .)
  ! reduce/reduce conflict for THEN resolved using rule 66 (bool_exp -> bool .)
    DO              reduce using rule 66 (bool_exp -> bool .)
    OR              reduce using rule 66 (bool_exp -> bool .)
    THEN            reduce using rule 66 (bool_exp -> bool .)
    AND             reduce using rule 68 (bool_exp_term -> bool .)

  ! DO              [ reduce using rule 68 (bool_exp_term -> bool .) ]
  ! OR              [ reduce using rule 68 (bool_exp_term -> bool .) ]
  ! THEN            [ reduce using rule 68 (bool_exp_term -> bool .) ]


state 42

    (69) bool -> OPEN_SKOBKA . exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> OPEN_SKOBKA . exp MORE exp CLOSE_SKOBKA
    (71) bool -> OPEN_SKOBKA . exp LESS exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 63
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 43

    (61) if -> IF bool_exp . THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> IF bool_exp . THEN START stmt_list_if END
    (63) bool_exp -> bool_exp . OR bool_exp_term

    THEN            shift and go to state 64
    OR              shift and go to state 60


state 44

    (2) prog -> VAR dec_list def_list START stmt_list . END
    (24) stmt_list -> stmt_list . SEMI_COLON stmt

    END             shift and go to state 65
    SEMI_COLON      shift and go to state 35


state 45

    (4) def_list -> def_list SEMI_COLON def .

    START           reduce using rule 4 (def_list -> def_list SEMI_COLON def .)
    SEMI_COLON      reduce using rule 4 (def_list -> def_list SEMI_COLON def .)


state 46

    (5) def -> DEF ID OPEN_SKOBKA . dec_list CLOSE_SKOBKA START stmt_list_def END
    (6) def -> DEF ID OPEN_SKOBKA . dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (21) id_list -> . ID
    (22) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 66
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 47

    (24) stmt_list -> stmt_list SEMI_COLON stmt .

    END             reduce using rule 24 (stmt_list -> stmt_list SEMI_COLON stmt .)
    SEMI_COLON      reduce using rule 24 (stmt_list -> stmt_list SEMI_COLON stmt .)


state 48

    (54) factor -> ID .
    (7) defstmt -> ID . OPEN_SKOBKA args CLOSE_SKOBKA

    MULTIPLICATION  reduce using rule 54 (factor -> ID .)
    DIV             reduce using rule 54 (factor -> ID .)
    PLUS            reduce using rule 54 (factor -> ID .)
    MINUS           reduce using rule 54 (factor -> ID .)
    END             reduce using rule 54 (factor -> ID .)
    SEMI_COLON      reduce using rule 54 (factor -> ID .)
    CLOSE_SKOBKA    reduce using rule 54 (factor -> ID .)
    EQUALITY        reduce using rule 54 (factor -> ID .)
    MORE            reduce using rule 54 (factor -> ID .)
    LESS            reduce using rule 54 (factor -> ID .)
    OPEN_SKOBKA     shift and go to state 67


state 49

    (45) assign -> ID ASSiGNSYMBOL exp .
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    END             reduce using rule 45 (assign -> ID ASSiGNSYMBOL exp .)
    SEMI_COLON      reduce using rule 45 (assign -> ID ASSiGNSYMBOL exp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 50

    (46) assign -> ID ASSiGNSYMBOL STRING .

    END             reduce using rule 46 (assign -> ID ASSiGNSYMBOL STRING .)
    SEMI_COLON      reduce using rule 46 (assign -> ID ASSiGNSYMBOL STRING .)


state 51

    (47) exp -> term .
    (51) term -> term . MULTIPLICATION factor
    (52) term -> term . DIV factor

    PLUS            reduce using rule 47 (exp -> term .)
    MINUS           reduce using rule 47 (exp -> term .)
    END             reduce using rule 47 (exp -> term .)
    SEMI_COLON      reduce using rule 47 (exp -> term .)
    CLOSE_SKOBKA    reduce using rule 47 (exp -> term .)
    EQUALITY        reduce using rule 47 (exp -> term .)
    MORE            reduce using rule 47 (exp -> term .)
    LESS            reduce using rule 47 (exp -> term .)
    MULTIPLICATION  shift and go to state 70
    DIV             shift and go to state 71


state 52

    (50) term -> factor .

    MULTIPLICATION  reduce using rule 50 (term -> factor .)
    DIV             reduce using rule 50 (term -> factor .)
    PLUS            reduce using rule 50 (term -> factor .)
    MINUS           reduce using rule 50 (term -> factor .)
    END             reduce using rule 50 (term -> factor .)
    SEMI_COLON      reduce using rule 50 (term -> factor .)
    CLOSE_SKOBKA    reduce using rule 50 (term -> factor .)
    EQUALITY        reduce using rule 50 (term -> factor .)
    MORE            reduce using rule 50 (term -> factor .)
    LESS            reduce using rule 50 (term -> factor .)


state 53

    (53) factor -> defstmt .

    MULTIPLICATION  reduce using rule 53 (factor -> defstmt .)
    DIV             reduce using rule 53 (factor -> defstmt .)
    PLUS            reduce using rule 53 (factor -> defstmt .)
    MINUS           reduce using rule 53 (factor -> defstmt .)
    END             reduce using rule 53 (factor -> defstmt .)
    SEMI_COLON      reduce using rule 53 (factor -> defstmt .)
    CLOSE_SKOBKA    reduce using rule 53 (factor -> defstmt .)
    EQUALITY        reduce using rule 53 (factor -> defstmt .)
    MORE            reduce using rule 53 (factor -> defstmt .)
    LESS            reduce using rule 53 (factor -> defstmt .)


state 54

    (55) factor -> INTEGER .

    MULTIPLICATION  reduce using rule 55 (factor -> INTEGER .)
    DIV             reduce using rule 55 (factor -> INTEGER .)
    PLUS            reduce using rule 55 (factor -> INTEGER .)
    MINUS           reduce using rule 55 (factor -> INTEGER .)
    END             reduce using rule 55 (factor -> INTEGER .)
    SEMI_COLON      reduce using rule 55 (factor -> INTEGER .)
    CLOSE_SKOBKA    reduce using rule 55 (factor -> INTEGER .)
    EQUALITY        reduce using rule 55 (factor -> INTEGER .)
    MORE            reduce using rule 55 (factor -> INTEGER .)
    LESS            reduce using rule 55 (factor -> INTEGER .)


state 55

    (56) factor -> FLOAT_NUM .

    MULTIPLICATION  reduce using rule 56 (factor -> FLOAT_NUM .)
    DIV             reduce using rule 56 (factor -> FLOAT_NUM .)
    PLUS            reduce using rule 56 (factor -> FLOAT_NUM .)
    MINUS           reduce using rule 56 (factor -> FLOAT_NUM .)
    END             reduce using rule 56 (factor -> FLOAT_NUM .)
    SEMI_COLON      reduce using rule 56 (factor -> FLOAT_NUM .)
    CLOSE_SKOBKA    reduce using rule 56 (factor -> FLOAT_NUM .)
    EQUALITY        reduce using rule 56 (factor -> FLOAT_NUM .)
    MORE            reduce using rule 56 (factor -> FLOAT_NUM .)
    LESS            reduce using rule 56 (factor -> FLOAT_NUM .)


state 56

    (57) factor -> OPEN_SKOBKA . exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 72
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 57

    (58) print -> PRINT OPEN_SKOBKA exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 73
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 58

    (59) print -> PRINT OPEN_SKOBKA STRING . CLOSE_SKOBKA

    CLOSE_SKOBKA    shift and go to state 74


state 59

    (60) while -> WHILE bool_exp DO . START stmt_list END

    START           shift and go to state 75


state 60

    (63) bool_exp -> bool_exp OR . bool_exp_term
    (67) bool_exp_term -> . bool_exp_term AND bool
    (68) bool_exp_term -> . bool
    (69) bool -> . OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> . OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
    (71) bool -> . OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

    OPEN_SKOBKA     shift and go to state 42

    bool_exp_term                  shift and go to state 76
    bool                           shift and go to state 77

state 61

    (67) bool_exp_term -> bool_exp_term AND . bool
    (69) bool -> . OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA
    (70) bool -> . OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA
    (71) bool -> . OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA

    OPEN_SKOBKA     shift and go to state 42

    bool                           shift and go to state 78

state 62

    (65) bool_exp -> NOT bool_exp .
    (63) bool_exp -> bool_exp . OR bool_exp_term

  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 65 (bool_exp -> NOT bool_exp .)
    THEN            reduce using rule 65 (bool_exp -> NOT bool_exp .)
    OR              shift and go to state 60

  ! OR              [ reduce using rule 65 (bool_exp -> NOT bool_exp .) ]


state 63

    (69) bool -> OPEN_SKOBKA exp . EQUALITY exp CLOSE_SKOBKA
    (70) bool -> OPEN_SKOBKA exp . MORE exp CLOSE_SKOBKA
    (71) bool -> OPEN_SKOBKA exp . LESS exp CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    EQUALITY        shift and go to state 79
    MORE            shift and go to state 80
    LESS            shift and go to state 81
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 64

    (61) if -> IF bool_exp THEN . START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> IF bool_exp THEN . START stmt_list_if END

    START           shift and go to state 82


state 65

    (2) prog -> VAR dec_list def_list START stmt_list END .

    $end            reduce using rule 2 (prog -> VAR dec_list def_list START stmt_list END .)


state 66

    (5) def -> DEF ID OPEN_SKOBKA dec_list . CLOSE_SKOBKA START stmt_list_def END
    (6) def -> DEF ID OPEN_SKOBKA dec_list . CLOSE_SKOBKA START VAR dec_list stmt_list_def END
    (15) dec_list -> dec_list . SEMI_COLON dec

    CLOSE_SKOBKA    shift and go to state 83
    SEMI_COLON      shift and go to state 9


state 67

    (7) defstmt -> ID OPEN_SKOBKA . args CLOSE_SKOBKA
    (8) args -> . arg
    (9) args -> . args SEMI_COLON arg
    (10) arg -> . ID
    (11) arg -> . INTEGER
    (12) arg -> . FLOAT_NUM
    (13) arg -> . OPEN_SKOBKA exp CLOSE_SKOBKA

    ID              shift and go to state 84
    INTEGER         shift and go to state 88
    FLOAT_NUM       shift and go to state 89
    OPEN_SKOBKA     shift and go to state 85

    args                           shift and go to state 86
    arg                            shift and go to state 87

state 68

    (48) exp -> exp PLUS . term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    term                           shift and go to state 90
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 69

    (49) exp -> exp MINUS . term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    term                           shift and go to state 91
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 70

    (51) term -> term MULTIPLICATION . factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    factor                         shift and go to state 92
    defstmt                        shift and go to state 53

state 71

    (52) term -> term DIV . factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    factor                         shift and go to state 93
    defstmt                        shift and go to state 53

state 72

    (57) factor -> OPEN_SKOBKA exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 94
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 73

    (58) print -> PRINT OPEN_SKOBKA exp CLOSE_SKOBKA .

    END             reduce using rule 58 (print -> PRINT OPEN_SKOBKA exp CLOSE_SKOBKA .)
    SEMI_COLON      reduce using rule 58 (print -> PRINT OPEN_SKOBKA exp CLOSE_SKOBKA .)


state 74

    (59) print -> PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA .

    END             reduce using rule 59 (print -> PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA .)
    SEMI_COLON      reduce using rule 59 (print -> PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA .)


state 75

    (60) while -> WHILE bool_exp DO START . stmt_list END
    (23) stmt_list -> . stmt
    (24) stmt_list -> . stmt_list SEMI_COLON stmt
    (25) stmt -> . assign
    (26) stmt -> . print
    (27) stmt -> . while
    (28) stmt -> . if
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 95
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 76

    (63) bool_exp -> bool_exp OR bool_exp_term .
    (67) bool_exp_term -> bool_exp_term . AND bool

    DO              reduce using rule 63 (bool_exp -> bool_exp OR bool_exp_term .)
    OR              reduce using rule 63 (bool_exp -> bool_exp OR bool_exp_term .)
    THEN            reduce using rule 63 (bool_exp -> bool_exp OR bool_exp_term .)
    AND             shift and go to state 61


state 77

    (68) bool_exp_term -> bool .

    AND             reduce using rule 68 (bool_exp_term -> bool .)
    DO              reduce using rule 68 (bool_exp_term -> bool .)
    OR              reduce using rule 68 (bool_exp_term -> bool .)
    THEN            reduce using rule 68 (bool_exp_term -> bool .)


state 78

    (67) bool_exp_term -> bool_exp_term AND bool .

    AND             reduce using rule 67 (bool_exp_term -> bool_exp_term AND bool .)
    DO              reduce using rule 67 (bool_exp_term -> bool_exp_term AND bool .)
    OR              reduce using rule 67 (bool_exp_term -> bool_exp_term AND bool .)
    THEN            reduce using rule 67 (bool_exp_term -> bool_exp_term AND bool .)


state 79

    (69) bool -> OPEN_SKOBKA exp EQUALITY . exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 96
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 80

    (70) bool -> OPEN_SKOBKA exp MORE . exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 97
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 81

    (71) bool -> OPEN_SKOBKA exp LESS . exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 98
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 82

    (61) if -> IF bool_exp THEN START . stmt_list_if END ELSE START stmt_list_if END
    (62) if -> IF bool_exp THEN START . stmt_list_if END
    (29) stmt_list_if -> . stmt_if
    (30) stmt_list_if -> . stmt_list_if SEMI_COLON stmt_if
    (31) stmt_if -> . assign
    (32) stmt_if -> . print
    (33) stmt_if -> . while
    (34) stmt_if -> . if
    (35) stmt_if -> . CONTINUE
    (36) stmt_if -> . BREAK
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    CONTINUE        shift and go to state 105
    BREAK           shift and go to state 106
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list_if                   shift and go to state 99
    stmt_if                        shift and go to state 100
    assign                         shift and go to state 101
    print                          shift and go to state 102
    while                          shift and go to state 103
    if                             shift and go to state 104

state 83

    (5) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA . START stmt_list_def END
    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA . START VAR dec_list stmt_list_def END

    START           shift and go to state 107


state 84

    (10) arg -> ID .

    CLOSE_SKOBKA    reduce using rule 10 (arg -> ID .)
    SEMI_COLON      reduce using rule 10 (arg -> ID .)


state 85

    (13) arg -> OPEN_SKOBKA . exp CLOSE_SKOBKA
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 108
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 86

    (7) defstmt -> ID OPEN_SKOBKA args . CLOSE_SKOBKA
    (9) args -> args . SEMI_COLON arg

    CLOSE_SKOBKA    shift and go to state 109
    SEMI_COLON      shift and go to state 110


state 87

    (8) args -> arg .

    CLOSE_SKOBKA    reduce using rule 8 (args -> arg .)
    SEMI_COLON      reduce using rule 8 (args -> arg .)


state 88

    (11) arg -> INTEGER .

    CLOSE_SKOBKA    reduce using rule 11 (arg -> INTEGER .)
    SEMI_COLON      reduce using rule 11 (arg -> INTEGER .)


state 89

    (12) arg -> FLOAT_NUM .

    CLOSE_SKOBKA    reduce using rule 12 (arg -> FLOAT_NUM .)
    SEMI_COLON      reduce using rule 12 (arg -> FLOAT_NUM .)


state 90

    (48) exp -> exp PLUS term .
    (51) term -> term . MULTIPLICATION factor
    (52) term -> term . DIV factor

    PLUS            reduce using rule 48 (exp -> exp PLUS term .)
    MINUS           reduce using rule 48 (exp -> exp PLUS term .)
    END             reduce using rule 48 (exp -> exp PLUS term .)
    SEMI_COLON      reduce using rule 48 (exp -> exp PLUS term .)
    CLOSE_SKOBKA    reduce using rule 48 (exp -> exp PLUS term .)
    EQUALITY        reduce using rule 48 (exp -> exp PLUS term .)
    MORE            reduce using rule 48 (exp -> exp PLUS term .)
    LESS            reduce using rule 48 (exp -> exp PLUS term .)
    MULTIPLICATION  shift and go to state 70
    DIV             shift and go to state 71


state 91

    (49) exp -> exp MINUS term .
    (51) term -> term . MULTIPLICATION factor
    (52) term -> term . DIV factor

    PLUS            reduce using rule 49 (exp -> exp MINUS term .)
    MINUS           reduce using rule 49 (exp -> exp MINUS term .)
    END             reduce using rule 49 (exp -> exp MINUS term .)
    SEMI_COLON      reduce using rule 49 (exp -> exp MINUS term .)
    CLOSE_SKOBKA    reduce using rule 49 (exp -> exp MINUS term .)
    EQUALITY        reduce using rule 49 (exp -> exp MINUS term .)
    MORE            reduce using rule 49 (exp -> exp MINUS term .)
    LESS            reduce using rule 49 (exp -> exp MINUS term .)
    MULTIPLICATION  shift and go to state 70
    DIV             shift and go to state 71


state 92

    (51) term -> term MULTIPLICATION factor .

    MULTIPLICATION  reduce using rule 51 (term -> term MULTIPLICATION factor .)
    DIV             reduce using rule 51 (term -> term MULTIPLICATION factor .)
    PLUS            reduce using rule 51 (term -> term MULTIPLICATION factor .)
    MINUS           reduce using rule 51 (term -> term MULTIPLICATION factor .)
    END             reduce using rule 51 (term -> term MULTIPLICATION factor .)
    SEMI_COLON      reduce using rule 51 (term -> term MULTIPLICATION factor .)
    CLOSE_SKOBKA    reduce using rule 51 (term -> term MULTIPLICATION factor .)
    EQUALITY        reduce using rule 51 (term -> term MULTIPLICATION factor .)
    MORE            reduce using rule 51 (term -> term MULTIPLICATION factor .)
    LESS            reduce using rule 51 (term -> term MULTIPLICATION factor .)


state 93

    (52) term -> term DIV factor .

    MULTIPLICATION  reduce using rule 52 (term -> term DIV factor .)
    DIV             reduce using rule 52 (term -> term DIV factor .)
    PLUS            reduce using rule 52 (term -> term DIV factor .)
    MINUS           reduce using rule 52 (term -> term DIV factor .)
    END             reduce using rule 52 (term -> term DIV factor .)
    SEMI_COLON      reduce using rule 52 (term -> term DIV factor .)
    CLOSE_SKOBKA    reduce using rule 52 (term -> term DIV factor .)
    EQUALITY        reduce using rule 52 (term -> term DIV factor .)
    MORE            reduce using rule 52 (term -> term DIV factor .)
    LESS            reduce using rule 52 (term -> term DIV factor .)


state 94

    (57) factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .

    MULTIPLICATION  reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    DIV             reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    PLUS            reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    MINUS           reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    END             reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    SEMI_COLON      reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    CLOSE_SKOBKA    reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    EQUALITY        reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    MORE            reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    LESS            reduce using rule 57 (factor -> OPEN_SKOBKA exp CLOSE_SKOBKA .)


state 95

    (60) while -> WHILE bool_exp DO START stmt_list . END
    (24) stmt_list -> stmt_list . SEMI_COLON stmt

    END             shift and go to state 111
    SEMI_COLON      shift and go to state 35


state 96

    (69) bool -> OPEN_SKOBKA exp EQUALITY exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 112
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 97

    (70) bool -> OPEN_SKOBKA exp MORE exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 113
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 98

    (71) bool -> OPEN_SKOBKA exp LESS exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 114
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 99

    (61) if -> IF bool_exp THEN START stmt_list_if . END ELSE START stmt_list_if END
    (62) if -> IF bool_exp THEN START stmt_list_if . END
    (30) stmt_list_if -> stmt_list_if . SEMI_COLON stmt_if

    END             shift and go to state 115
    SEMI_COLON      shift and go to state 116


state 100

    (29) stmt_list_if -> stmt_if .

    END             reduce using rule 29 (stmt_list_if -> stmt_if .)
    SEMI_COLON      reduce using rule 29 (stmt_list_if -> stmt_if .)


state 101

    (31) stmt_if -> assign .

    END             reduce using rule 31 (stmt_if -> assign .)
    SEMI_COLON      reduce using rule 31 (stmt_if -> assign .)


state 102

    (32) stmt_if -> print .

    END             reduce using rule 32 (stmt_if -> print .)
    SEMI_COLON      reduce using rule 32 (stmt_if -> print .)


state 103

    (33) stmt_if -> while .

    END             reduce using rule 33 (stmt_if -> while .)
    SEMI_COLON      reduce using rule 33 (stmt_if -> while .)


state 104

    (34) stmt_if -> if .

    END             reduce using rule 34 (stmt_if -> if .)
    SEMI_COLON      reduce using rule 34 (stmt_if -> if .)


state 105

    (35) stmt_if -> CONTINUE .

    END             reduce using rule 35 (stmt_if -> CONTINUE .)
    SEMI_COLON      reduce using rule 35 (stmt_if -> CONTINUE .)


state 106

    (36) stmt_if -> BREAK .

    END             reduce using rule 36 (stmt_if -> BREAK .)
    SEMI_COLON      reduce using rule 36 (stmt_if -> BREAK .)


state 107

    (5) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START . stmt_list_def END
    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START . VAR dec_list stmt_list_def END
    (37) stmt_list_def -> . stmt_def
    (38) stmt_list_def -> . stmt_list_def SEMI_COLON stmt_def
    (39) stmt_def -> . assign
    (40) stmt_def -> . print
    (41) stmt_def -> . while
    (42) stmt_def -> . if
    (43) stmt_def -> . return
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END
    (44) return -> . RETURN exp

    VAR             shift and go to state 118
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 125

    stmt_list_def                  shift and go to state 117
    stmt_def                       shift and go to state 119
    assign                         shift and go to state 120
    print                          shift and go to state 121
    while                          shift and go to state 122
    if                             shift and go to state 123
    return                         shift and go to state 124

state 108

    (13) arg -> OPEN_SKOBKA exp . CLOSE_SKOBKA
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    CLOSE_SKOBKA    shift and go to state 126
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 109

    (7) defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .

    MULTIPLICATION  reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    DIV             reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    PLUS            reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    MINUS           reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    END             reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    SEMI_COLON      reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    CLOSE_SKOBKA    reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    EQUALITY        reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    MORE            reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)
    LESS            reduce using rule 7 (defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA .)


state 110

    (9) args -> args SEMI_COLON . arg
    (10) arg -> . ID
    (11) arg -> . INTEGER
    (12) arg -> . FLOAT_NUM
    (13) arg -> . OPEN_SKOBKA exp CLOSE_SKOBKA

    ID              shift and go to state 84
    INTEGER         shift and go to state 88
    FLOAT_NUM       shift and go to state 89
    OPEN_SKOBKA     shift and go to state 85

    arg                            shift and go to state 127

state 111

    (60) while -> WHILE bool_exp DO START stmt_list END .

    END             reduce using rule 60 (while -> WHILE bool_exp DO START stmt_list END .)
    SEMI_COLON      reduce using rule 60 (while -> WHILE bool_exp DO START stmt_list END .)


state 112

    (69) bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA .

    DO              reduce using rule 69 (bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA .)
    OR              reduce using rule 69 (bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA .)
    AND             reduce using rule 69 (bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA .)
    THEN            reduce using rule 69 (bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA .)


state 113

    (70) bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA .

    DO              reduce using rule 70 (bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA .)
    OR              reduce using rule 70 (bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA .)
    AND             reduce using rule 70 (bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA .)
    THEN            reduce using rule 70 (bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA .)


state 114

    (71) bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA .

    DO              reduce using rule 71 (bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA .)
    OR              reduce using rule 71 (bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA .)
    AND             reduce using rule 71 (bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA .)
    THEN            reduce using rule 71 (bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA .)


state 115

    (61) if -> IF bool_exp THEN START stmt_list_if END . ELSE START stmt_list_if END
    (62) if -> IF bool_exp THEN START stmt_list_if END .

    ELSE            shift and go to state 128
    END             reduce using rule 62 (if -> IF bool_exp THEN START stmt_list_if END .)
    SEMI_COLON      reduce using rule 62 (if -> IF bool_exp THEN START stmt_list_if END .)


state 116

    (30) stmt_list_if -> stmt_list_if SEMI_COLON . stmt_if
    (31) stmt_if -> . assign
    (32) stmt_if -> . print
    (33) stmt_if -> . while
    (34) stmt_if -> . if
    (35) stmt_if -> . CONTINUE
    (36) stmt_if -> . BREAK
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    CONTINUE        shift and go to state 105
    BREAK           shift and go to state 106
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_if                        shift and go to state 129
    assign                         shift and go to state 101
    print                          shift and go to state 102
    while                          shift and go to state 103
    if                             shift and go to state 104

state 117

    (5) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def . END
    (38) stmt_list_def -> stmt_list_def . SEMI_COLON stmt_def

    END             shift and go to state 130
    SEMI_COLON      shift and go to state 131


state 118

    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR . dec_list stmt_list_def END
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (21) id_list -> . ID
    (22) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 132
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 119

    (37) stmt_list_def -> stmt_def .

    END             reduce using rule 37 (stmt_list_def -> stmt_def .)
    SEMI_COLON      reduce using rule 37 (stmt_list_def -> stmt_def .)


state 120

    (39) stmt_def -> assign .

    END             reduce using rule 39 (stmt_def -> assign .)
    SEMI_COLON      reduce using rule 39 (stmt_def -> assign .)


state 121

    (40) stmt_def -> print .

    END             reduce using rule 40 (stmt_def -> print .)
    SEMI_COLON      reduce using rule 40 (stmt_def -> print .)


state 122

    (41) stmt_def -> while .

    END             reduce using rule 41 (stmt_def -> while .)
    SEMI_COLON      reduce using rule 41 (stmt_def -> while .)


state 123

    (42) stmt_def -> if .

    END             reduce using rule 42 (stmt_def -> if .)
    SEMI_COLON      reduce using rule 42 (stmt_def -> if .)


state 124

    (43) stmt_def -> return .

    END             reduce using rule 43 (stmt_def -> return .)
    SEMI_COLON      reduce using rule 43 (stmt_def -> return .)


state 125

    (44) return -> RETURN . exp
    (47) exp -> . term
    (48) exp -> . exp PLUS term
    (49) exp -> . exp MINUS term
    (50) term -> . factor
    (51) term -> . term MULTIPLICATION factor
    (52) term -> . term DIV factor
    (53) factor -> . defstmt
    (54) factor -> . ID
    (55) factor -> . INTEGER
    (56) factor -> . FLOAT_NUM
    (57) factor -> . OPEN_SKOBKA exp CLOSE_SKOBKA
    (7) defstmt -> . ID OPEN_SKOBKA args CLOSE_SKOBKA

    ID              shift and go to state 48
    INTEGER         shift and go to state 54
    FLOAT_NUM       shift and go to state 55
    OPEN_SKOBKA     shift and go to state 56

    exp                            shift and go to state 133
    term                           shift and go to state 51
    factor                         shift and go to state 52
    defstmt                        shift and go to state 53

state 126

    (13) arg -> OPEN_SKOBKA exp CLOSE_SKOBKA .

    CLOSE_SKOBKA    reduce using rule 13 (arg -> OPEN_SKOBKA exp CLOSE_SKOBKA .)
    SEMI_COLON      reduce using rule 13 (arg -> OPEN_SKOBKA exp CLOSE_SKOBKA .)


state 127

    (9) args -> args SEMI_COLON arg .

    CLOSE_SKOBKA    reduce using rule 9 (args -> args SEMI_COLON arg .)
    SEMI_COLON      reduce using rule 9 (args -> args SEMI_COLON arg .)


state 128

    (61) if -> IF bool_exp THEN START stmt_list_if END ELSE . START stmt_list_if END

    START           shift and go to state 134


state 129

    (30) stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .

    END             reduce using rule 30 (stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .)
    SEMI_COLON      reduce using rule 30 (stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .)


state 130

    (5) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END .

    START           reduce using rule 5 (def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END .)
    SEMI_COLON      reduce using rule 5 (def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END .)


state 131

    (38) stmt_list_def -> stmt_list_def SEMI_COLON . stmt_def
    (39) stmt_def -> . assign
    (40) stmt_def -> . print
    (41) stmt_def -> . while
    (42) stmt_def -> . if
    (43) stmt_def -> . return
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END
    (44) return -> . RETURN exp

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 125

    stmt_def                       shift and go to state 135
    assign                         shift and go to state 120
    print                          shift and go to state 121
    while                          shift and go to state 122
    if                             shift and go to state 123
    return                         shift and go to state 124

state 132

    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list . stmt_list_def END
    (15) dec_list -> dec_list . SEMI_COLON dec
    (37) stmt_list_def -> . stmt_def
    (38) stmt_list_def -> . stmt_list_def SEMI_COLON stmt_def
    (39) stmt_def -> . assign
    (40) stmt_def -> . print
    (41) stmt_def -> . while
    (42) stmt_def -> . if
    (43) stmt_def -> . return
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END
    (44) return -> . RETURN exp

    SEMI_COLON      shift and go to state 9
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 125

    stmt_list_def                  shift and go to state 136
    stmt_def                       shift and go to state 119
    assign                         shift and go to state 120
    print                          shift and go to state 121
    while                          shift and go to state 122
    if                             shift and go to state 123
    return                         shift and go to state 124

state 133

    (44) return -> RETURN exp .
    (48) exp -> exp . PLUS term
    (49) exp -> exp . MINUS term

    END             reduce using rule 44 (return -> RETURN exp .)
    SEMI_COLON      reduce using rule 44 (return -> RETURN exp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69


state 134

    (61) if -> IF bool_exp THEN START stmt_list_if END ELSE START . stmt_list_if END
    (29) stmt_list_if -> . stmt_if
    (30) stmt_list_if -> . stmt_list_if SEMI_COLON stmt_if
    (31) stmt_if -> . assign
    (32) stmt_if -> . print
    (33) stmt_if -> . while
    (34) stmt_if -> . if
    (35) stmt_if -> . CONTINUE
    (36) stmt_if -> . BREAK
    (45) assign -> . ID ASSiGNSYMBOL exp
    (46) assign -> . ID ASSiGNSYMBOL STRING
    (58) print -> . PRINT OPEN_SKOBKA exp CLOSE_SKOBKA
    (59) print -> . PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA
    (60) while -> . WHILE bool_exp DO START stmt_list END
    (61) if -> . IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END
    (62) if -> . IF bool_exp THEN START stmt_list_if END

    CONTINUE        shift and go to state 105
    BREAK           shift and go to state 106
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list_if                   shift and go to state 137
    stmt_if                        shift and go to state 100
    assign                         shift and go to state 101
    print                          shift and go to state 102
    while                          shift and go to state 103
    if                             shift and go to state 104

state 135

    (38) stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .

    END             reduce using rule 38 (stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .)
    SEMI_COLON      reduce using rule 38 (stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .)


state 136

    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def . END
    (38) stmt_list_def -> stmt_list_def . SEMI_COLON stmt_def

    END             shift and go to state 138
    SEMI_COLON      shift and go to state 131


state 137

    (61) if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if . END
    (30) stmt_list_if -> stmt_list_if . SEMI_COLON stmt_if

    END             shift and go to state 139
    SEMI_COLON      shift and go to state 116


state 138

    (6) def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END .

    START           reduce using rule 6 (def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END .)
    SEMI_COLON      reduce using rule 6 (def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END .)


state 139

    (61) if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END .

    END             reduce using rule 61 (if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END .)
    SEMI_COLON      reduce using rule 61 (if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (bool_exp -> bool)
WARNING: rejected rule (bool_exp_term -> bool) in state 41
