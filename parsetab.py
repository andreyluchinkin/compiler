
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSiGNSYMBOL BOOLEAN BREAK CLOSE_SKOBKA COMA CONTINUE DEF DIV DO DOUBLE_POINT ELSE END EQUALITY FLOAT FLOAT_NUM ID IF INT INTEGER LESS MINUS MORE MULTIPLICATION NOT OPEN_SKOBKA OR PLUS PRINT RETURN SEMI_COLON START STR STRING THEN VAR WHILEprog : VAR dec_list START stmt_list END\n            | VAR dec_list def_list START stmt_list ENDdef_list : def\n               | def_list SEMI_COLON defdef : DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END\n            | DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def ENDdefstmt : ID OPEN_SKOBKA args CLOSE_SKOBKAargs : arg\n            | args SEMI_COLON argarg : ID\n            | INTEGER\n            | FLOAT_NUM\n            | OPEN_SKOBKA exp CLOSE_SKOBKAdec_list : dec\n               | dec_list SEMI_COLON decdec : id_list DOUBLE_POINT typetype : INT\n            | BOOLEAN\n            | FLOAT\n            | STRid_list : ID\n                | id_list COMA IDstmt_list : stmt\n                | stmt_list SEMI_COLON stmtstmt : assign\n            | print\n            | while\n            | ifstmt_list_if : stmt_if\n                | stmt_list_if SEMI_COLON stmt_ifstmt_if : assign\n            | print\n            | while\n            | if\n            | CONTINUE\n            | BREAKstmt_list_def : stmt_def\n                | stmt_list_def SEMI_COLON stmt_defstmt_def : assign\n            | print\n            | while\n            | if\n            | returnreturn : RETURN expassign : ID ASSiGNSYMBOL exp\n              | ID ASSiGNSYMBOL STRINGexp : term\n            | exp PLUS term\n            | exp MINUS termterm : factor\n            | term MULTIPLICATION factor\n            | term DIV factorfactor : defstmt\n            | ID\n            | INTEGER\n            | FLOAT_NUM\n            | OPEN_SKOBKA exp CLOSE_SKOBKAprint : PRINT OPEN_SKOBKA exp CLOSE_SKOBKA\n            | PRINT OPEN_SKOBKA STRING CLOSE_SKOBKAwhile : WHILE bool_exp DO START stmt_list ENDif : IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END\n            | IF bool_exp THEN START stmt_list_if ENDbool_exp : bool_exp OR bool_exp_term\n                | bool_exp_term\n                | NOT bool_exp\n                | boolbool_exp_term : bool_exp_term AND bool\n                | boolbool : OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA\n            | OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA\n            | OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA'
    
_lr_action_items = {'VAR':([0,107,],[2,118,]),'$end':([1,34,65,],[0,-1,-2,]),'ID':([2,4,7,9,11,13,24,26,28,29,30,31,32,35,36,37,42,46,56,67,68,69,70,71,75,79,80,81,82,85,107,110,116,118,125,131,132,134,],[6,-14,20,6,27,33,20,-15,-16,-17,-18,-19,-20,20,48,48,48,6,48,84,48,48,48,48,20,48,48,48,20,48,20,84,20,6,48,20,20,20,]),'START':([3,4,8,10,26,28,29,30,31,32,45,59,64,83,128,130,138,],[7,-14,24,-3,-15,-16,-17,-18,-19,-20,-4,75,82,107,134,-5,-6,]),'SEMI_COLON':([3,4,8,10,14,15,16,17,18,19,26,28,29,30,31,32,44,45,47,48,49,50,51,52,53,54,55,66,73,74,84,86,87,88,89,90,91,92,93,94,95,99,100,101,102,103,104,105,106,109,111,115,117,119,120,121,122,123,124,126,127,129,130,132,133,135,136,137,138,139,],[9,-14,25,-3,35,-23,-25,-26,-27,-28,-15,-16,-17,-18,-19,-20,35,-4,-24,-54,-45,-46,-47,-50,-53,-55,-56,9,-58,-59,-10,110,-8,-11,-12,-48,-49,-51,-52,-57,35,116,-29,-31,-32,-33,-34,-35,-36,-7,-60,-62,131,-37,-39,-40,-41,-42,-43,-13,-9,-30,-5,9,-44,-38,131,116,-6,-61,]),'DEF':([3,4,25,26,28,29,30,31,32,],[11,-14,11,-15,-16,-17,-18,-19,-20,]),'CLOSE_SKOBKA':([4,26,28,29,30,31,32,48,51,52,53,54,55,57,58,66,72,84,86,87,88,89,90,91,92,93,94,96,97,98,108,109,126,127,],[-14,-15,-16,-17,-18,-19,-20,-54,-47,-50,-53,-55,-56,73,74,83,94,-10,109,-8,-11,-12,-48,-49,-51,-52,-57,112,113,114,126,-7,-13,-9,]),'PRINT':([4,7,24,26,28,29,30,31,32,35,75,82,107,116,131,132,134,],[-14,21,21,-15,-16,-17,-18,-19,-20,21,21,21,21,21,21,21,21,]),'WHILE':([4,7,24,26,28,29,30,31,32,35,75,82,107,116,131,132,134,],[-14,22,22,-15,-16,-17,-18,-19,-20,22,22,22,22,22,22,22,22,]),'IF':([4,7,24,26,28,29,30,31,32,35,75,82,107,116,131,132,134,],[-14,23,23,-15,-16,-17,-18,-19,-20,23,23,23,23,23,23,23,23,]),'RETURN':([4,26,28,29,30,31,32,107,131,132,],[-14,-15,-16,-17,-18,-19,-20,125,125,125,]),'DOUBLE_POINT':([5,6,33,],[12,-21,-22,]),'COMA':([5,6,33,],[13,-21,-22,]),'INT':([12,],[29,]),'BOOLEAN':([12,],[30,]),'FLOAT':([12,],[31,]),'STR':([12,],[32,]),'END':([14,15,16,17,18,19,44,47,48,49,50,51,52,53,54,55,73,74,90,91,92,93,94,95,99,100,101,102,103,104,105,106,109,111,115,117,119,120,121,122,123,124,129,133,135,136,137,139,],[34,-23,-25,-26,-27,-28,65,-24,-54,-45,-46,-47,-50,-53,-55,-56,-58,-59,-48,-49,-51,-52,-57,111,115,-29,-31,-32,-33,-34,-35,-36,-7,-60,-62,130,-37,-39,-40,-41,-42,-43,-30,-44,-38,138,139,-61,]),'ASSiGNSYMBOL':([20,],[36,]),'OPEN_SKOBKA':([21,22,23,27,36,37,40,42,48,56,60,61,67,68,69,70,71,79,80,81,85,110,125,],[37,42,42,46,56,56,42,56,67,56,42,42,85,56,56,56,56,56,56,56,56,85,56,]),'NOT':([22,23,40,],[40,40,40,]),'STRING':([36,37,],[50,58,]),'INTEGER':([36,37,42,56,67,68,69,70,71,79,80,81,85,110,125,],[54,54,54,54,88,54,54,54,54,54,54,54,54,88,54,]),'FLOAT_NUM':([36,37,42,56,67,68,69,70,71,79,80,81,85,110,125,],[55,55,55,55,89,55,55,55,55,55,55,55,55,89,55,]),'DO':([38,39,41,62,76,77,78,112,113,114,],[59,-64,-66,-65,-63,-68,-67,-69,-70,-71,]),'OR':([38,39,41,43,62,76,77,78,112,113,114,],[60,-64,-66,60,60,-63,-68,-67,-69,-70,-71,]),'THEN':([39,41,43,62,76,77,78,112,113,114,],[-64,-66,64,-65,-63,-68,-67,-69,-70,-71,]),'AND':([39,41,76,77,78,112,113,114,],[61,-68,61,-68,-67,-69,-70,-71,]),'MULTIPLICATION':([48,51,52,53,54,55,90,91,92,93,94,109,],[-54,70,-50,-53,-55,-56,70,70,-51,-52,-57,-7,]),'DIV':([48,51,52,53,54,55,90,91,92,93,94,109,],[-54,71,-50,-53,-55,-56,71,71,-51,-52,-57,-7,]),'PLUS':([48,49,51,52,53,54,55,57,63,72,90,91,92,93,94,96,97,98,108,109,133,],[-54,68,-47,-50,-53,-55,-56,68,68,68,-48,-49,-51,-52,-57,68,68,68,68,-7,68,]),'MINUS':([48,49,51,52,53,54,55,57,63,72,90,91,92,93,94,96,97,98,108,109,133,],[-54,69,-47,-50,-53,-55,-56,69,69,69,-48,-49,-51,-52,-57,69,69,69,69,-7,69,]),'EQUALITY':([48,51,52,53,54,55,63,90,91,92,93,94,109,],[-54,-47,-50,-53,-55,-56,79,-48,-49,-51,-52,-57,-7,]),'MORE':([48,51,52,53,54,55,63,90,91,92,93,94,109,],[-54,-47,-50,-53,-55,-56,80,-48,-49,-51,-52,-57,-7,]),'LESS':([48,51,52,53,54,55,63,90,91,92,93,94,109,],[-54,-47,-50,-53,-55,-56,81,-48,-49,-51,-52,-57,-7,]),'CONTINUE':([82,116,134,],[105,105,105,]),'BREAK':([82,116,134,],[106,106,106,]),'ELSE':([115,],[128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'dec_list':([2,46,118,],[3,66,132,]),'dec':([2,9,46,118,],[4,26,4,4,]),'id_list':([2,9,46,118,],[5,5,5,5,]),'def_list':([3,],[8,]),'def':([3,25,],[10,45,]),'stmt_list':([7,24,75,],[14,44,95,]),'stmt':([7,24,35,75,],[15,15,47,15,]),'assign':([7,24,35,75,82,107,116,131,132,134,],[16,16,16,16,101,120,101,120,120,101,]),'print':([7,24,35,75,82,107,116,131,132,134,],[17,17,17,17,102,121,102,121,121,102,]),'while':([7,24,35,75,82,107,116,131,132,134,],[18,18,18,18,103,122,103,122,122,103,]),'if':([7,24,35,75,82,107,116,131,132,134,],[19,19,19,19,104,123,104,123,123,104,]),'type':([12,],[28,]),'bool_exp':([22,23,40,],[38,43,62,]),'bool_exp_term':([22,23,40,60,],[39,39,39,76,]),'bool':([22,23,40,60,61,],[41,41,41,77,78,]),'exp':([36,37,42,56,79,80,81,85,125,],[49,57,63,72,96,97,98,108,133,]),'term':([36,37,42,56,68,69,79,80,81,85,125,],[51,51,51,51,90,91,51,51,51,51,51,]),'factor':([36,37,42,56,68,69,70,71,79,80,81,85,125,],[52,52,52,52,52,52,92,93,52,52,52,52,52,]),'defstmt':([36,37,42,56,68,69,70,71,79,80,81,85,125,],[53,53,53,53,53,53,53,53,53,53,53,53,53,]),'args':([67,],[86,]),'arg':([67,110,],[87,127,]),'stmt_list_if':([82,134,],[99,137,]),'stmt_if':([82,116,134,],[100,129,100,]),'stmt_list_def':([107,132,],[117,136,]),'stmt_def':([107,131,132,],[119,135,119,]),'return':([107,131,132,],[124,124,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> VAR dec_list START stmt_list END','prog',5,'p_prog','parser.py',29),
  ('prog -> VAR dec_list def_list START stmt_list END','prog',6,'p_prog','parser.py',30),
  ('def_list -> def','def_list',1,'p_def_list','parser.py',37),
  ('def_list -> def_list SEMI_COLON def','def_list',3,'p_def_list','parser.py',38),
  ('def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START stmt_list_def END','def',8,'p_def','parser.py',45),
  ('def -> DEF ID OPEN_SKOBKA dec_list CLOSE_SKOBKA START VAR dec_list stmt_list_def END','def',10,'p_def','parser.py',46),
  ('defstmt -> ID OPEN_SKOBKA args CLOSE_SKOBKA','defstmt',4,'p_defstmt','parser.py',53),
  ('args -> arg','args',1,'p_args','parser.py',57),
  ('args -> args SEMI_COLON arg','args',3,'p_args','parser.py',58),
  ('arg -> ID','arg',1,'p_arg','parser.py',66),
  ('arg -> INTEGER','arg',1,'p_arg','parser.py',67),
  ('arg -> FLOAT_NUM','arg',1,'p_arg','parser.py',68),
  ('arg -> OPEN_SKOBKA exp CLOSE_SKOBKA','arg',3,'p_arg','parser.py',69),
  ('dec_list -> dec','dec_list',1,'p_dec_list','parser.py',76),
  ('dec_list -> dec_list SEMI_COLON dec','dec_list',3,'p_dec_list','parser.py',77),
  ('dec -> id_list DOUBLE_POINT type','dec',3,'p_dec','parser.py',84),
  ('type -> INT','type',1,'p_type','parser.py',88),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',89),
  ('type -> FLOAT','type',1,'p_type','parser.py',90),
  ('type -> STR','type',1,'p_type','parser.py',91),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',95),
  ('id_list -> id_list COMA ID','id_list',3,'p_id_list','parser.py',96),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',103),
  ('stmt_list -> stmt_list SEMI_COLON stmt','stmt_list',3,'p_stmt_list','parser.py',104),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',111),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',112),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',113),
  ('stmt -> if','stmt',1,'p_stmt','parser.py',114),
  ('stmt_list_if -> stmt_if','stmt_list_if',1,'p_stmt_list_if','parser.py',119),
  ('stmt_list_if -> stmt_list_if SEMI_COLON stmt_if','stmt_list_if',3,'p_stmt_list_if','parser.py',120),
  ('stmt_if -> assign','stmt_if',1,'p_stmt_if','parser.py',127),
  ('stmt_if -> print','stmt_if',1,'p_stmt_if','parser.py',128),
  ('stmt_if -> while','stmt_if',1,'p_stmt_if','parser.py',129),
  ('stmt_if -> if','stmt_if',1,'p_stmt_if','parser.py',130),
  ('stmt_if -> CONTINUE','stmt_if',1,'p_stmt_if','parser.py',131),
  ('stmt_if -> BREAK','stmt_if',1,'p_stmt_if','parser.py',132),
  ('stmt_list_def -> stmt_def','stmt_list_def',1,'p_stmt_list_def','parser.py',137),
  ('stmt_list_def -> stmt_list_def SEMI_COLON stmt_def','stmt_list_def',3,'p_stmt_list_def','parser.py',138),
  ('stmt_def -> assign','stmt_def',1,'p_stmt_def','parser.py',145),
  ('stmt_def -> print','stmt_def',1,'p_stmt_def','parser.py',146),
  ('stmt_def -> while','stmt_def',1,'p_stmt_def','parser.py',147),
  ('stmt_def -> if','stmt_def',1,'p_stmt_def','parser.py',148),
  ('stmt_def -> return','stmt_def',1,'p_stmt_def','parser.py',149),
  ('return -> RETURN exp','return',2,'p_return','parser.py',154),
  ('assign -> ID ASSiGNSYMBOL exp','assign',3,'p_assign','parser.py',158),
  ('assign -> ID ASSiGNSYMBOL STRING','assign',3,'p_assign','parser.py',159),
  ('exp -> term','exp',1,'p_exp','parser.py',163),
  ('exp -> exp PLUS term','exp',3,'p_exp','parser.py',164),
  ('exp -> exp MINUS term','exp',3,'p_exp','parser.py',165),
  ('term -> factor','term',1,'p_term','parser.py',172),
  ('term -> term MULTIPLICATION factor','term',3,'p_term','parser.py',173),
  ('term -> term DIV factor','term',3,'p_term','parser.py',174),
  ('factor -> defstmt','factor',1,'p_factor','parser.py',181),
  ('factor -> ID','factor',1,'p_factor','parser.py',182),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',183),
  ('factor -> FLOAT_NUM','factor',1,'p_factor','parser.py',184),
  ('factor -> OPEN_SKOBKA exp CLOSE_SKOBKA','factor',3,'p_factor','parser.py',185),
  ('print -> PRINT OPEN_SKOBKA exp CLOSE_SKOBKA','print',4,'p_print','parser.py',191),
  ('print -> PRINT OPEN_SKOBKA STRING CLOSE_SKOBKA','print',4,'p_print','parser.py',192),
  ('while -> WHILE bool_exp DO START stmt_list END','while',6,'p_while','parser.py',196),
  ('if -> IF bool_exp THEN START stmt_list_if END ELSE START stmt_list_if END','if',10,'p_if','parser.py',200),
  ('if -> IF bool_exp THEN START stmt_list_if END','if',6,'p_if','parser.py',201),
  ('bool_exp -> bool_exp OR bool_exp_term','bool_exp',3,'p_bool_exp','parser.py',208),
  ('bool_exp -> bool_exp_term','bool_exp',1,'p_bool_exp','parser.py',209),
  ('bool_exp -> NOT bool_exp','bool_exp',2,'p_bool_exp','parser.py',210),
  ('bool_exp -> bool','bool_exp',1,'p_bool_exp','parser.py',211),
  ('bool_exp_term -> bool_exp_term AND bool','bool_exp_term',3,'p_bool_exp_term','parser.py',220),
  ('bool_exp_term -> bool','bool_exp_term',1,'p_bool_exp_term','parser.py',221),
  ('bool -> OPEN_SKOBKA exp EQUALITY exp CLOSE_SKOBKA','bool',5,'p_bool','parser.py',230),
  ('bool -> OPEN_SKOBKA exp MORE exp CLOSE_SKOBKA','bool',5,'p_bool','parser.py',231),
  ('bool -> OPEN_SKOBKA exp LESS exp CLOSE_SKOBKA','bool',5,'p_bool','parser.py',232),
]
